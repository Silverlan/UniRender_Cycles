name: Build Windows
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
  schedule:
    - cron: '0 0 * * *'
    
concurrency:
  group: environment-win-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  # See https://github.com/git-lfs/git-lfs/issues/5749
  GIT_CLONE_PROTECTION_ACTIVE: 'false'

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: "Windows x64 MSVC"
    steps:
      - name: Setup Pragma
        uses: Silverlan/pragma/github_actions/setup@main
        
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        
      - name: Build Dependencies
        uses: Silverlan/pragma/github_actions/build@main
        id: build-deps
        with:
          # This will build the core dependencies, as well as cycles, but not Pragma
          build-args: "--with-essential-client-modules=0 --with-common-modules=0 --with-lua-debugger=0 --module pr_unirender:\"https://github.com/Silverlan/pr_cycles.git\" --build 1 --build-cycles"

      # Note: The libraries need to correspond to the ones in build.py and build_cycles.py
      - name: Copy UniRender_cycles files
        shell: bash
        run: |
          mkdir -p release
          staging="${{ steps.build-deps.outputs.deps-dir }}/staging"
          cp -a "${staging}/alembic" release/
          cp -a "${staging}/embree" release/
          cp -a "${staging}/jpeg" release/
          cp -a "${staging}/llvm" release/
          cp -a "${staging}/openexr" release/
          cp -a "${staging}/openvdb" release/
          cp -a "${staging}/png" release/
          cp -a "${staging}/tiff" release/
          cp -a "${staging}/zstd" release/

          cp -a "${staging}/cycles" release/
          cp -a "${staging}/imath" release/
          cp -a "${staging}/opencolorio" release/
          cp -a "${staging}/openimagedenoise" release/
          cp -a "${staging}/openimageio" release/
          cp -a "${staging}/opensubdiv" release/
          cp -a "${staging}/tbb" release/
        
      - name: Build Tag Name
        id: build_tag_name
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "schedule" ]]; then
            echo "tag_name=latest" >> $GITHUB_OUTPUT
          else
            echo "tag_name=$(TZ='Europe/Berlin' date +%F)" >> $GITHUB_OUTPUT
          fi

      - name: Release Binaries
        uses: Silverlan/common_actions/release_nightly_binaries@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: ${{ github.ref_name }}
          tag: '${{ steps.build_tag_name.outputs.tag_name }}'
